import groovy.json.JsonSlurper

apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply plugin: 'com.google.gms.google-services'

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '../..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
    // reactNativeDir = file("../../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
    // codegenDir = file("../../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../../node_modules/react-native/cli.js
    // cliFile = file("../../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]

    /* Autolinking */
    autolinkLibrariesWithApp()
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = io.github.react-native-community:jsc-android-intl:2026004.+`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

tasks.register('checkEnvironmentVariables') {
    doFirst {
        if (System.getenv("APP_ID") != null) {
            println("APP_ID exisits")
        } else {
            throw new Exception("APP_ID not found!")
        }
        if (System.getenv("ANDROID_VCL_KEY_1_PWD") != null) {
            println("ANDROID_VCL_KEY_1_PWD exisits")
        } else {
            throw new Exception("ANDROID_VCL_KEY_1_PWD not found!")
        }
        if (System.getenv("ANDROID_VCL_KEY_1_ALIAS") != null) {
            println("ANDROID_VCL_KEY_1_ALIAS exisits")
        } else {
            throw new Exception("ANDROID_VCL_KEY_1_ALIAS not found!")
        }
    }
}

def getNodePackageVersion() {
    def packageFile = new File("$rootDir/../package.json")
    def packageJson = new JsonSlurper().parseText(packageFile.text)
    return packageJson["version"]
}

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace "io.velocitycareerlabs"
    defaultConfig {
        applicationId System.getenv("APP_ID") ? System.getenv("APP_ID") : 'io.velocitycareerlabs.holderapp'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        missingDimensionStrategy 'react-native-camera', 'general'
        multiDexEnabled true
        versionName getNodePackageVersion()
        buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
        vectorDrawables.useSupportLibrary = true
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            storeFile file('vcl-key/vcl-key-1')
            storePassword System.getenv("ANDROID_VCL_KEY_1_PWD")
            keyAlias System.getenv("ANDROID_VCL_KEY_1_ALIAS")
            keyPassword System.getenv("ANDROID_VCL_KEY_1_PWD")
        }
    }

    buildTypes {
        debug {
            matchingFallbacks = ['release']
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://facebook.github.io/react-native/docs/signed-apk-android.
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            ndk {
                debugSymbolLevel 'FULL'
            }
        }
    }

    flavorDimensions.add("network")
    productFlavors {
        prod {
            dimension "network"
            minSdkVersion rootProject.ext.minSdkVersion
            targetSdkVersion rootProject.ext.targetSdkVersion
            applicationId System.getenv("APP_ID") ?: 'io.velocitycareerlabs.holderapp'
            resValue "string", "build_config_package", applicationId
            versionName defaultConfig.versionName
            versionCode Integer.valueOf(System.getenv("VERSION_CODE") ?: "1")
            missingDimensionStrategy 'react-native-camera', 'general'
            multiDexEnabled defaultConfig.multiDexEnabled
            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            vectorDrawables.useSupportLibrary = true
            resValue "string", "app_name", "Velocity Career Wallet"
        }

        staging {
            dimension "network"
            minSdkVersion rootProject.ext.minSdkVersion
            targetSdkVersion rootProject.ext.targetSdkVersion
            applicationId System.getenv("APP_ID") ?: 'io.velocitycareerlabs.holderapp.staging'
            resValue "string", "build_config_package", applicationId
            versionName defaultConfig.versionName
            versionCode Integer.valueOf(System.getenv("VERSION_CODE") ?: "1")
            missingDimensionStrategy 'react-native-camera', 'general'
            multiDexEnabled defaultConfig.multiDexEnabled
            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            vectorDrawables.useSupportLibrary = true
            resValue "string", "app_name", "Velocity TestNet"
        }

        qa {
            dimension "network"
            minSdkVersion rootProject.ext.minSdkVersion
            targetSdkVersion rootProject.ext.targetSdkVersion
            applicationId System.getenv("APP_ID") ?: 'io.velocitycareerlabs.holderapp.qa'
            resValue "string", "build_config_package", applicationId
            versionName defaultConfig.versionName
            versionCode Integer.valueOf(System.getenv("VERSION_CODE") ?: "1")
            missingDimensionStrategy 'react-native-camera', 'general'
            multiDexEnabled defaultConfig.multiDexEnabled
            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            vectorDrawables.useSupportLibrary = true
            resValue "string", "app_name", "Velocity QaNet"
        }

        dev {
            dimension "network"
            minSdkVersion rootProject.ext.minSdkVersion
            targetSdkVersion rootProject.ext.targetSdkVersion
            applicationId System.getenv("APP_ID") ?: 'io.velocitycareerlabs.holderapp.dev'
            resValue "string", "build_config_package", applicationId
            versionName defaultConfig.versionName
            versionCode Integer.valueOf(System.getenv("VERSION_CODE") ?: "1")
            missingDimensionStrategy 'react-native-camera', 'general'
            multiDexEnabled defaultConfig.multiDexEnabled
            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            vectorDrawables.useSupportLibrary = true
            resValue "string", "app_name", "Velocity DevNet"
        }

        devGamma {
            dimension "network"
            minSdkVersion rootProject.ext.minSdkVersion
            targetSdkVersion rootProject.ext.targetSdkVersion
            applicationId System.getenv("APP_ID") ?: 'io.velocitycareerlabs.holderapp.dev.gamma'
            resValue "string", "build_config_package", applicationId
            versionName defaultConfig.versionName
            versionCode Integer.valueOf(System.getenv("VERSION_CODE") ?: "1")
            missingDimensionStrategy 'react-native-camera', 'general'
            multiDexEnabled defaultConfig.multiDexEnabled
            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            vectorDrawables.useSupportLibrary = true
            resValue "string", "app_name", "Velocity DevGamma"
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

    // required to avoid crash on Android 12 API 31
    // Needs to be upgraded after setting API 35
    implementation 'androidx.work:work-runtime-ktx:2.9.1'

    // Yoti:
    // With automatic capture via OCR and NFC capture
    implementation "com.yoti.mobile.android.sdk:yoti-sdk-doc-scan:${rootProject.ext.yotiSdkVersion}"
    // With manual capture only, no OCR, no NFC - around 14Mb smaller in size
//    implementation "com.yoti.mobile.android.sdk:yoti-sdk-doc-scan-slim:${rootProject.ext.yotiSdkVersion}"
    implementation "com.yoti.mobile.android.sdk:yoti-sdk-doc-scan-sup:${rootProject.ext.yotiSdkVersion}"
    implementation "com.yoti.mobile.android.sdk:yoti-sdk-liveness-zoom:${rootProject.ext.yotiSdkVersion}"
    // With embedded AI model
    implementation "com.yoti.mobile.android.sdk:yoti-sdk-facecapture:${rootProject.ext.yotiSdkVersion}"
    // Without embedded AI model - around 20 MB smaller in size
//    implementation "com.yoti.mobile.android.sdk:yoti-sdk-facecapture-unbundled:${rootProject.ext.yotiSdkVersion}"

    // TODO: uncomment after VL-5635
    // implementation 'com.google.android.gms:play-services-ads-identifier:18.0.1'
    // implementation 'com.android.installreferrer:installreferrer:2.2'

}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
tasks.register('copyDownloadableDepsToLibs', Copy) {
    configurations.implementation.setCanBeResolved(true)
    configurations.api.setCanBeResolved(true)
    into 'libs'
}

def isNewArchitectureEnabled() {
    // To opt-in for the New Architecture, you can either:
    // - Set `newArchEnabled` to true inside the `gradle.properties` file
    // - Invoke gradle with `-newArchEnabled=true`
    // - Set an environment variable `ORG_GRADLE_PROJECT_newArchEnabled=true`
    return project.hasProperty("newArchEnabled") && project.newArchEnabled == "true"
}
