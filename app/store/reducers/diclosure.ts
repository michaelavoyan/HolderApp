import {assign, map, set} from 'lodash/fp';
import {
    DisclosureData,
    AcceptedDisclosureRequestObject,
    DisclosureState,
    DisclosureStatus,
    DisclosureCredentialsToIssuerParams,
    SharedCredentials,
    SelectCredentialToShareParams
} from '../types/disclosure';
import * as authActionTypes from '../actionTypes/auth';
import * as profileActionTypes from '../actionTypes/profile';
import * as actionTypes from '../actionTypes/disclosure';
import {GenericAction, reducingFunction} from '../helpers/createReducer';

export const EMPTY_DISCLOSURE = {
    id: '',
    description: '',
    duration: '',
    organization: {logo: '', name: '', brandName: '', brandImage: ''},
    purpose: '',
    name: '',
    termsUrl: '',
    definitionId: '',
    types: []
};

export const DISCLOSURE_DATA_CLEAR = {
    purpose: '',
    name: '',
    duration: '',
    inputDescriptors: [],
    termsUrl: ''
};

const initialState: DisclosureState = {
    disclosures: [],
    noDisclosuresPopup: false,
    disclosureData: DISCLOSURE_DATA_CLEAR,
    issuingSession: null,
    /**
     * issuing session for autogenerated temporary (previously logged out) user
     */
    isTempUserFirstIssuingSessionActive: false,
    selectedCredentials: [],
    inspectionSession: null
};

const disclosuresSuccess = ({
    disclosures
}: {
    disclosures: AcceptedDisclosureRequestObject[];
}) => set('disclosures', disclosures);

const logoutSuccess = () => set('disclosures', []);

const setNoDisclosuresPopup = ({
    noDisclosuresPopup
}: {
    noDisclosuresPopup: boolean;
}) => set('noDisclosuresPopup', noDisclosuresPopup);

const setDisclosureData = ({
    disclosureData
}: {
    disclosureData: DisclosureData;
}) => set('disclosureData', disclosureData);

const setDisclosureDataVerified = (
    {exchangeId}: {exchangeId: string},
    state: DisclosureState
) =>
    assign(state, {
        disclosures: map(
            (disclosure: any) =>
                disclosure.exchangeId === exchangeId
                    ? {...disclosure, status: DisclosureStatus.verified}
                    : disclosure,
            state.disclosures
        )
    });

const clearDisclosureData = () => set('disclosureData', DISCLOSURE_DATA_CLEAR);

const saveOriginalIssuingSession = ({
    disclosureData
}: {
    disclosureData: DisclosureCredentialsToIssuerParams;
}) => set('issuingSession', disclosureData);

const clearOriginalIssuingSession = () => set('issuingSession', null);

export const setIsTempUserFirstIssuingSessionActive = ({
    isActive
}: {
    isActive: boolean;
}) => set('isTempUserFirstIssuingSessionActive', isActive);

export const setSelectedCredentials = ({
    selectedCredentials
}: {
    selectedCredentials: SharedCredentials[];
}) => set('selectedCredentials', selectedCredentials);

export const saveOriginalInspectionSession = ({
    sessionData
}: {
    sessionData: SelectCredentialToShareParams;
}) => set('inspectionSession', sessionData);

export const clearOriginalInspectionSession = () =>
    set('inspectionSession', null);

const actionReducers = {
    [actionTypes.DISCLOSURES_SUCCESS]: disclosuresSuccess,
    [actionTypes.SET_NO_DISCLOSURES_POPUP]: setNoDisclosuresPopup,
    [authActionTypes.LOGOUT_SUCCESS]: logoutSuccess,
    [profileActionTypes.RESET_DATA_SUCCESS]: logoutSuccess,
    [actionTypes.SET_DISCLOSURE_DATA]: setDisclosureData,
    [actionTypes.SET_DISCLOSURE_DATA_VERIFIED]: setDisclosureDataVerified,
    [actionTypes.CLEAR_DISCLOSURE_DATA]: clearDisclosureData,
    [actionTypes.SAVE_ORIGINAL_ISSUING_SESSION]: saveOriginalIssuingSession,
    [actionTypes.CLEAR_ORIGINAL_ISSUING_SESSION]: clearOriginalIssuingSession,
    [actionTypes.SET_IS_TEMP_USER_FIRST_ISSUING_SESSION]: setIsTempUserFirstIssuingSessionActive,
    [actionTypes.SET_SELECTED_CREDENTIALS]: setSelectedCredentials,
    [actionTypes.SAVE_ORIGINAL_INSPECTION_SESSION]: saveOriginalInspectionSession,
    [actionTypes.CLEAR_ORIGINAL_INSPECTION_SESSION]: clearOriginalInspectionSession
};

export const disclosureReducer = (
    state = initialState,
    action: GenericAction
): DisclosureState =>
    reducingFunction<DisclosureState>(actionReducers, state, action);
